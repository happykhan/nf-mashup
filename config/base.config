params {
    help           = false
    outdir         = "$baseDir/outdir"
    tracedir = "${params.outdir}/pipeline_info"    
    reference = false
    
    // Defaults only, expecting to be overwritten
    max_memory = '16.GB'
    max_cpus   = 8
    max_time   = '10.h'

}

timeline {
  enabled = true
  overwrite = true
  file = "${params.pipeline_info}/execution_timeline.html"
}
report {
  enabled = true
  overwrite = true
  file = "${params.pipeline_info}/execution_report.html"
}
dag {
  enabled = false
}
trace {
  enabled = true
  overwrite = true
  file = "${params.pipeline_info}/pipeline_stats.txt"
  fields = "task_id,\
  hash,\
  process,\
  tag,\
  status,\
  exit,\
  start,\
  container,\
  cpus,\
  time,\
  disk,\
  memory,\
  duration,\
  realtime,\
  queue,\
  %cpu,\
  %mem,\
  rss,\
  vmem,\
  rchar,\
  wchar"
}

process {
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }
    // Capture exit codes from upstream processes when piping
    process.shell = ['/bin/bash', '-euo', 'pipefail']


    // memory errors which should be retried. otherwise error out
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_single {
        cpus          = { check_max( 1                  , 'cpus'    ) }
        memory        = { check_max( 4.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus          = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 8.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus          = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 24.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus          = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory        = { check_max( 48.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time          = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory        = { check_max( 256.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
}