//Load base config
includeConfig 'config/base.config'

plugins {
  id 'nf-validation@1.1.3'
}

profiles {
    standard {
        docker.runOptions='-u $(id -u):$(id -g) --platform=linux/x86_64'
        docker.enabled = true
        process {
            executor = 'local'
            container = 'happykhan/python-base:latest'
            withLabel:'mash' {
                container = 'staphb/mash:latest'
            }
            withName:'RAPIDNJ'{ 
                container = 'quay.io/biocontainers/rapidnj:2.3.2--hc9558a2_0' 
            }            

        }   
    }

    bmrc {
        singularity {
            enabled = true
            runOptions = '--bind /well --bind /gpfs3 --no-home'
        }
        process {
            cpus = 1
            memory = '2G'
            executor = 'slurm'
            queue = 'short,long'
            clusterOptions='-A aanensen.prj'
            penv = 'shmem'
            errorStrategy = { task.attempt <= 5 ? "retry" : "finish" }
            maxRetries = 5

            withLabel:'mash' {
                container = '/well/aanensen/shared/singularity/nf-phylotyping/mash_latest.sif'
            }
            withName:'RAPIDNJ'{ 
                container = '/well/aanensen/shared/singularity/nf-phylotyping/rapidnj_latest.sif' 
            }                 
      
        }
        tower {
            enabled = false
        }
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}